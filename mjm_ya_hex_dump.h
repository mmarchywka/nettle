#ifndef MJM_YA_HEX_DUMP_H__
#define MJM_YA_HEX_DUMP_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

//#include "mjm_block_matrix.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"

#include "mjm_misc_parse.h"


#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2025 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Talking Rock GA 30175 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_ya_hex_dump.h},
  url = {},
  version = {0.0.0},
  date-started={2025-04-05},
}
*/

// Sat 05 Apr 2025 06:22:09 PM EDT
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_ya_hex_dump   
// QUICKCOMPILE  g++  -MMD -MF mjm_ya_hex_dump.deps  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_YA_HEX_DUMP -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_ya_hex_dump.h  -o mjm_ya_hex_dump.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_ya_hex_dump("mjm_ya_hex_dump" , "  ");

template <class Tr>
class mjm_ya_hex_dump 
{
 typedef mjm_ya_hex_dump Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;
typedef mjm_var_parse<Tr> ParseTable;


// API

public:
mjm_ya_hex_dump() {Init(); }
mjm_ya_hex_dump(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
mjm_ya_hex_dump(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void active( const bool a ) { m_act=a;}
bool active( ) const {  return m_act;}
void print(const char * p, const IdxTy n, const IdxTy flags=0) {if (m_act)  Print(p,n,flags); } 
void stream(const IdxTy flags) { if (m_act) Stream(std::cin,flags); } 
bool stuff() const { return m_r.size()!=0; } 
StrTy output(const IdxTy flags) { if (m_act)  return Output(flags); else return StrTy(); }
void annotate( const StrTy & s , const IdxTy flags=0) {if (m_act)  Annotate(s,flags); } 
void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }

StrTy xxx_test(const StrTy & sin, const IdxTy flags) 
{ return XXX_test(sin,flags); } 
~mjm_ya_hex_dump() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
static bool Bit(const IdxTy f, const IdxTy b) { return  ((f>>b)&1)!=0; }
// should loop over map now 
static void Set(IdxTy& f, const IdxTy b,const bool x) //const  
    { if (x) f|=(1<<b); else f&=((~1)<<b); }
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);

//void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }

void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
StrTy XXX_test(const StrTy & sin, const IdxTy flags) 
{
StrTy sout="";
MM_ERR(MMPR3(sin,flags,sout))
BaseParams kvp(sin);

return sout;
} // XXX_test
void Stream(IsTy & is , const IdxTy flags=0)
{
const IdxTy sz=1<<8;
char b[2*sz];
while (!is.eof()&&!is.bad())
{
int fick=is.get();
if (fick==EOF) break;
b[0]=fick;
//is.get(b,sz); // this ficks up zero char fick
//IdxTy n=strlen(b);
// get delim stuill asfick 
//if (!is.eof()) { b[n]=is.get(); ++n; }  
//MM_ERR(MMPR2(b,is.fail()))
Print(b,1,0);
std::cout<<Output(0);

} // eof 
std::cout<<Output(1);

} // Stream 
StrTy Output(const IdxTy flags) { 
Ss ss;
// only out complete lines if not set
Ragged r;
const bool all=Bit(flags,0);
IdxTy i=0;
IdxTy sz=all? (m_r.size()):m_completes;
for(; i<sz; ++i)
{
const Line & l=m_r[i];
MM_ILOOP(j,l.size()) { 
ss<<l[j];
} // j 
ss<<CRLF;
} // i 
m_completes=0;
while ( i<m_r.size()) { r.add(m_r[i]); ++i; }
m_r=r;

return ss.str(); 

} // Output 
void Annotate( const StrTy & s , const IdxTy flags) { 
Line l;
l.push_back(s);
m_r.add(l);
// all lines are comlete now 
m_completes=m_r.size();
}  // Annotate




//bool CharTest(const char *  ps, const IdxTy i, const IdxTy mask, const bool p )
bool CharTest(const char cp,  const IdxTy mask, const bool p )
{
//const char cp=ps[i];
IdxTy lu= m_clut.lut(cp);
const bool x= ((lu&mask)!=0);
return p?x:!x;
}



void Print(const char * p, const IdxTy n, const IdxTy flags)
{
//const IdxTy mask= ParseTable::UC|ParseTable::LC|ParseTable::DIGIT; //  m_clut
const IdxTy mask= ParseTable::PRINT; // |ParseTable::LC|ParseTable::DIGIT; //  m_clut
const IdxTy maskc= ParseTable::CTRL; // |ParseTable::LC|ParseTable::DIGIT; //  m_clut
IdxTy nspace=1;
MM_ILOOP(i,n)
{
//while  (m_r.size()<(m_completes+3))  { m_r.add(Line()); } 
IdxTy adds=0; 
const StrTy spacer="          ";
while  (m_r.size()<(m_completes+3))  { 
Line l;
if (adds==2) 
{ Ss ss; ss<<std::hex<< std::setfill(' ')<< std::setw(spacer.length()-1)<<m_idx<<" ";
l.push_back(ss.str()); 
}
else 
l.push_back(spacer);

m_r.add(l); 
++adds;
} 
const  char c=p[i];
Ss ss,rr,cc;
ss<<std::hex<<((((unsigned char) c)>>4) &15); 
rr<<std::hex<<((((unsigned char) c)>>0) &15); 
m_r[m_completes].push_back(ss.str());
m_r[m_completes+1].push_back(rr.str());
const bool ascii=CharTest(c,mask,true)&&CharTest(c,maskc,!true);
if (ascii)
{
cc<<c;
m_r[m_completes+2].push_back(cc.str());
}
else
{
cc<<" ";
m_r[m_completes+2].push_back(cc.str());
} // non 
// this should subtract off the leading address stuff or 
// include its length.. 
const IdxTy len=m_r[m_completes+2].size()-nspace;
if (len>=m_llen) m_completes+=3;
++m_idx;
} // i 

} // Print
void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
//const Line & l=r[i];
//const IdxTy len=l.size();


}  // i 

} // Init 
void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
BaseParams kvp(sin);
} // Init 

void Init()
{
m_llen=60;
m_idx=0;
m_completes=0;
m_act=true;
} // Init



// MEMBERS
ParseTable m_clut;
Ragged m_r;
IdxTy m_llen;
IdxTy m_idx;
IdxTy m_completes;
bool m_act;
}; // mjm_ya_hex_dump

//////////////////////////////////////////////

template <class Tr>
class mjm_ya_hex_dump_map : public std::map<typename Tr::StrTy, mjm_ya_hex_dump< Tr > >  
{
 typedef mjm_ya_hex_dump_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_ya_hex_dump< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_ya_hex_dump_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_ya_hex_dump_map




////////////////////////////////////////////
#ifdef  TEST_MJM_YA_HEX_DUMP
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_ya_hex_dump <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;

#define CI(n) atoi(cip.wif(n).c_str()) 

void about()
{
Ss ss;
ss<<" MJM_YA_HEX_DUMP "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
typedef mjm_ragged_table Ragged;

#define CIP(n) atoi(cip.wif(n).c_str())
#define CFP(n) atof(cip.wif(n).c_str())

int main(int argc,char **args)
{
about();
typedef mjm_ya_hex_dump<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="loadragged") {
 	const IdxTy start=atoi(cip.wif(2).c_str()); 
	const IdxTy first=atoi(cip.wif(3).c_str()); 
	const IdxTy flags=atoi(cip.wif(4).c_str()); 
Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="stream") {x.stream(atoi(cip.p1.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="test") {StrTy xxx=x.xxx_test(cip.p1,CIP(2)); MM_ERR(MMPR(xxx))  }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_YA_HEX_DUMP_H__ 
