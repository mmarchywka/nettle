#ifndef MJM_BIN_COLS_H__
#define MJM_BIN_COLS_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

//#include "mjm_block_matrix.h"
//#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
//#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
//#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"



#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2025 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Talking Rock GA 30175 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_bin_cols.h},
  url = {},
  version = {0.0.0},
  date-started={2025-09-10},
}
*/

// Wed Sep 10 06:22:22 PM EDT 2025
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_bin_cols   
// QUICKCOMPILE  g++  -MMD -MF mjm_bin_cols.deps  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_BIN_COLS -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_bin_cols.h  -o mjm_bin_cols.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_bin_cols("mjm_bin_cols" , "  ");

template <class Tr>
class mjm_bin_cols 
{
 typedef mjm_bin_cols Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
//typedef mjm_ragged_table Ragged;
//typedef Ragged::Line Line;
//typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;
//Super::count_type (TgtTy:: * FncPtr)();
 class _bin_col  
{

typedef IdxTy (_bin_col:: * ReaderPtr)
( StrTy & s, const char * p,  IdxTy& sz, const IdxTy );
public:
_bin_col() {Init_bin_col(); } 
~_bin_col() {Free_bin_col(); } 

//_bin_col(const Line & l,  const IdxTy first ) { Init_bin_col(l,first); }
_bin_col(const StrTy & s,  const IdxTy flags ) { Init_bin_col(s,flags); }
//_bin_col(const Ragged & r, const IdxTy first,const IdxTy i0, const IdxTy flags ) 
//{Init_bin_col(r,first,i0,flags); } 
// return chars used in sz, return code for stuff
IdxTy read(StrTy & s, const char * p,  IdxTy& sz, const IdxTy flags=0)
{ 
return (this->*m_reader)(s,p,sz,flags); 
//return Read(s,p,sz,flags); 

} 

IdxTy readTyD(D & d, const char *p, IdxTy &sz, const IdxTy flags=0)
{
IdxTy rce=Early<D>(sz,flags); if (rce!=0) return rce;
d=*(D*) p; 
sz=m_size;
return 0; 
} // ReadTyD
template <class Tx> 
IdxTy readTyInt(Tx & d, const char * p, IdxTy& sz, const IdxTy flags=0)
{ 
IdxTy rce=Early<Tx>(sz,flags); if (rce!=0) return rce;
 d=*(Tx*) p; 
sz=m_size;
return 0; 
}  // ReadInt



StrTy save( const IdxTy flags=0) const { return Save_bin_col(flags); } 
StrTy dump( const IdxTy flags=0) const { return Dump_bin_col(flags); } 
private:

StrTy Dump_bin_col( const IdxTy flags=0) const  
{
Ss ss;
// ss<<MMPR4(); 
ss<<MMPR4(m_size, m_len, m_orient, m_type);
ss<<MMPR3( m_prec, m_fixed, m_partial_ok);

return ss.str(); 
} // Dump 

//m["int64le"]="size=8;type=int;len=8;fixed=1;orient=le";
/*m["c8"]="size=8;type=char;len=1;fixed=1";
m["char"]="size=8;type=char;len=1;fixed=1";
m["s"]="size=8;type=string;len=0;fixed=0";
m["uint64"]="size=8;type=uint;len=8;fixed=1";
m["int64"]="size=8;type=int;len=8;fixed=1";
m["int64le"]="size=8;type=int;len=8;fixed=1;orient=le";
m["int64be"]="size=8;type=int;len=8;fixed=1;orient=be";
m["d"]="size=8;type=double;len=8;fixed=1";
m["pad"]="size=1;type=pad;len=1;fixed=1";
m["align4"]="size=0;type=align;len=4;fixed=0";
*/
void Init_bin_col(const StrTy & s,  const IdxTy flags ) 
{ Init_bin_col(); 
BaseParams kvp(s);
kvp.get(m_size,"size");
kvp.get(m_len,"len");
kvp.get(m_orient,"orient");
kvp.get(m_type,"type");
kvp.get(m_prec,"prec");
kvp.get(m_fixed,"fixed");
kvp.get(m_partial_ok,"partial");
MakeFlags();
MM_ERR(MMPR(dump()))
kvp.get(m_u,"unsigned");
kvp.get(m_le,"le");
kvp.get(m_be,"be");

} // Init_bin_col

void MakeFlags()
{
if (m_orient=="le") m_le=true;
if (m_orient=="be") m_be=true;

if (m_type=="double") m_reader=&_bin_col::ReadDouble;
if (m_type=="int") m_reader=&_bin_col::ReadInt<int>;
if (m_type=="uint") 
{ m_u=true;  m_reader=&_bin_col::ReadInt<unsigned int> ; } 

} // MakeFlags
// 1 = returning size needed , 2 = no reader 
IdxTy Read(StrTy & s, const char * p, IdxTy& sz, const IdxTy flags=0)
{ 
MM_ERR(" null reader ")
sz=m_size;
s="";

return 2; 
}  // Read
IdxTy ReadDouble(StrTy & s, const char * p, IdxTy& sz, const IdxTy flags=0)
{ 
IdxTy rce=Early<D>(sz,flags); 
if (rce!=0) return rce;
/*
const bool eof=Bit(flags,0);
const bool part= (eof&&m_partial_ok);
bool use_part=false;
if (sz<m_size) 
{
if (!part) { sz=m_size; return 1; }
// dealing with pieces well requires copy of partial etc don't for now. 
if (part) { sz=m_size; return 1; }
}
if (m_size!=sizeof(D))
{ MM_ERR(" check sie "<<MMPR2(dump(),sizeof(D))) }
*/

D d=*(D*) p; 
Ss ss; ss<<std::setprecision(m_prec)<<d;
s=ss.str();
sz=m_size;
return 0; 
}  // ReadDouble
template<class Tx> 
IdxTy Early( IdxTy& sz, const IdxTy flags)
{
const bool eof=Bit(flags,0);
const bool part= (eof&&m_partial_ok);
//bool use_part=false;
if (sz<m_size) 
{
if (!part) { sz=m_size; return 1; }
// dealing with pieces well requires copy of partial etc don't for now. 
if (part) { sz=m_size; return 1; }
}
if (m_size!=sizeof(Tx))
{ MM_ERR(" check sie "<<MMPR2(dump(),sizeof(Tx))) }


return 0;
} // Early  
template <class Tx> 
IdxTy ReadInt(StrTy & s, const char * p, IdxTy& sz, const IdxTy flags=0)
{ 
IdxTy rce=Early<Tx>(sz,flags); 
if (rce!=0) return rce;

Tx d=*(Tx*) p; 
Ss ss; ss<<std::setprecision(m_prec)<<d;
s=ss.str();
sz=m_size;
return 0; 
}  // ReadInt




/*
void Init_bin_col(const Line & l,  const IdxTy first ) 
{ 
Init_bin_col();
const IdxTy len=l.size();
for(IdxTy i=first; i<len; ++i)
{


} // i 

} // Init_bin_col
void Init_bin_col(const Ragged & r, const IdxTy first,const IdxTy i0,const IdxTy flags ) 
{
Init_bin_col();
const IdxTy sz=r.size();
for(IdxTy i=i0; i<sz; ++i)
{
const Line & l=r[i];
const IdxTy len=l.size();

} // i 

} // Init_bin_col
*/
StrTy Save_bin_col( const IdxTy flags=0) const  
{
StrTy s;
BaseParams kvp; // (); new compiler fck 
//kcp,encode(s,"",);
return s; 
} // Dump 



void Free_bin_col()
{

} // Free_bin_col

void Init_bin_col()
{
m_size=1;
m_len=1;
m_orient="";
m_type="";
m_prec=20;
 m_fixed=1;
m_partial_ok=false;
m_le=false;
m_be=false;
m_u=false;
//m_reader=0;
m_reader=&_bin_col::Read;

} // Init_bin_col

// _bin_colMEMBERS
IdxTy m_size;
IdxTy m_len;
StrTy m_orient;
StrTy m_type;
IdxTy m_prec;
IdxTy m_fixed;
bool m_partial_ok,m_le,m_be,m_u;
ReaderPtr m_reader;

 
}; // _bin_col

typedef _bin_col BinCol;
typedef std::vector<BinCol> BinCols;
typedef std::map<StrTy,StrTy> ColSpecMap;
typedef std::map<StrTy,BinCol> BinColMap;
// API

public:
mjm_bin_cols() {Init(); }
mjm_bin_cols(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
//mjm_bin_cols(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
IdxTy size() const { return m_cols.size();}
IdxTy code() const { return m_code;}
IdxTy x() const { return m_x; }
void make_map() { MakeMap(); } 
template <class Tv> IdxTy add(Tv & line, const char * p, IdxTy & n, const IdxTy flags)
{ return Add(line,p,n,flags); } 
void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
//void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }

StrTy xxx_test(const StrTy & sin, const IdxTy flags) 
{ return XXX_test(sin,flags); } 
~mjm_bin_cols() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
//int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
//int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
static bool Bit(const IdxTy f, const IdxTy b) { return  ((f>>b)&1)!=0; }
// should loop over map now 
static void Set(IdxTy& f, const IdxTy b,const bool x) //const  
    { if (x) f|=(1<<b); else f&=~((1)<<b); }
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
StrTy XXX_test(const StrTy & sin, const IdxTy flags) 
{
StrTy sout="";
MM_ERR(MMPR3(sin,flags,sout))
BaseParams kvp(sin);

return sout;
} // XXX_test
/*
void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
//const Line & l=r[i];
//const IdxTy len=l.size();


}  // i 

} // Init 
*/
template <class Tv> IdxTy Add(Tv & line, const char * p, IdxTy & n, const IdxTy flags)
{ 
IdxTy rc=0;
IdxTy used=0;
IdxTy nnext=n;
MM_LOOP(ii,m_cols)
{
StrTy s;
//IdxTy read(StrTy & s, const char * p,  IdxTy& sz, const IdxTy flags=0)
// 1 = returning size needed , 2 = no reader 
IdxTy lc=(*ii).read(s,p+used,nnext,flags);
if (lc==0) { line.push_back(s); used+=nnext; nnext=n-used; continue; }
// caller can look at line size and x() to determine what is needed
if (lc==1) { n=used; rc=2; m_x=nnext; rc=lc;  return rc; } 
MM_ERR(MMPR3(lc,(*ii).dump(),line.size()))
} // ii 
n=used;
//return Add(line,p,n,flags); 
return rc;
}  // Add


void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
BaseParams kvp(sin);
std::vector<StrTy> colnames;
kvp.get_vec_contig(colnames,"col");
MM_LOOP(ii,colnames)
{
if (m_m.find(*ii) == m_m.end())
{
MM_ERR(" no columnu named "<<MMPR(*ii))
continue;
}
BinCol c(m_m[(*ii)],flags);
m_cols.push_back(c);
} // ii

} // Init 
void ColSyms()
{
ColSpecMap& m= m_m;
m["c8"]="size=8;type=char;len=1;fixed=1";
m["char"]="size=8;type=char;len=1;fixed=1";
m["s"]="size=8;type=string;len=0;fixed=0";
m["uint64"]="size=8;type=uint;len=8;fixed=1";
m["int64"]="size=8;type=int;len=8;fixed=1";
m["int64le"]="size=8;type=int;len=8;fixed=1;orient=le";
m["int64be"]="size=8;type=int;len=8;fixed=1;orient=be";
m["d"]="size=8;type=double;len=8;fixed=1";
m["pad"]="size=1;type=pad;len=1;fixed=1";
m["align4"]="size=0;type=align;len=4;fixed=0";



} // ColSyms
void MakeMap(const IdxTy flags=0)
{
MM_LOOP(ii,m_m)
{
BinCol bc((*ii).second,flags);
m_bc_map[(*ii).first]=bc;
} // ii 

}  // MakeMap

void Init()
{
//if (m_m.size()==0) 
m_m.clear();
ColSyms();
m_cols.clear();
m_code=0;
m_x=0;
} // Init



// MEMBERS
ColSpecMap m_m;
BinCols m_cols;
BinColMap m_bc_map;
IdxTy m_code,m_x;

}; // mjm_bin_cols

//////////////////////////////////////////////

template <class Tr>
class mjm_bin_cols_map : public std::map<typename Tr::StrTy, mjm_bin_cols< Tr > >  
{
 typedef mjm_bin_cols_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_bin_cols< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_bin_cols_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_bin_cols_map




////////////////////////////////////////////
#ifdef  TEST_MJM_BIN_COLS
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_bin_cols <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;

#define CI(n) atoi(cip.wif(n).c_str()) 

void about()
{
Ss ss;
ss<<" MJM_BIN_COLS "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
//typedef mjm_ragged_table Ragged;

#define CIP(n) atoi(cip.wif(n).c_str())
#define CFP(n) atof(cip.wif(n).c_str())

int main(int argc,char **args)
{
about();
typedef mjm_bin_cols<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

//if (cmd=="loadragged") {
// 	const IdxTy start=atoi(cip.wif(2).c_str()); 
//	const IdxTy first=atoi(cip.wif(3).c_str()); 
//	const IdxTy flags=atoi(cip.wif(4).c_str()); 
//Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="test") {StrTy xxx=x.xxx_test(cip.p1,CIP(2)); MM_ERR(MMPR(xxx))  }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_BIN_COLS_H__ 
