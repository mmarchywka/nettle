#ifndef MJM_POLLFDS_H__
#define MJM_POLLFDS_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

//#include "mjm_block_matrix.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"
// https://www.ibm.com/docs/en/i/7.4?topic=designs-using-poll-instead-select

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/poll.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <errno.h>



#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2025 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Talking Rock GA 30175 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_pollfds.h},
  url = {},
  version = {0.0.0},
  date-started={2025-04-06},
}
*/

// Sun 06 Apr 2025 02:35:19 PM EDT
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_pollfds   
// QUICKCOMPILE  g++  -MMD -MF mjm_pollfds.deps  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_POLLFDS -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_pollfds.h  -o mjm_pollfds.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_pollfds("mjm_pollfds" , "  ");

template <class Tr>
class mjm_pollfds 
{
 typedef mjm_pollfds Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;
typedef struct pollfd PollTy;

// API

public:
mjm_pollfds() {Init(); }
mjm_pollfds(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
mjm_pollfds(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
pollfd * fdss()  { return  &m_polls[0]; } 
IdxTy n() const { return m_n;}
IdxTy size() const { return m_size;}

// these do nothing now as updated at end of loop 
// only call at end of loop but still needed doh 
IdxTy add_listen(const int s )  { return  AddListen(s); } 
IdxTy add_input(const int s ) { return  AddInput(s); } 
IdxTy add_output(const int s ) { return  AddOutput(s); } 

StrTy event_str(const int e)const { return  EventStr( e); } 
template <class Tv > void non_zeds(Tv & v, const IdxTy n) { NonZeds(v,n); } 

void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }

StrTy xxx_test(const StrTy & sin, const IdxTy flags) 
{ return XXX_test(sin,flags); } 
void clear() { m_n=0; } 
~mjm_pollfds() {delete [] m_polls;}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
static bool Bit(const IdxTy f, const IdxTy b) { return  ((f>>b)&1)!=0; }
// should loop over map now 
static void Set(IdxTy& f, const IdxTy b,const bool x) //const  
    { if (x) f|=(1<<b); else f&=((~1)<<b); }
StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
StrTy XXX_test(const StrTy & sin, const IdxTy flags) 
{
StrTy sout="";
MM_ERR(MMPR3(sin,flags,sout))
BaseParams kvp(sin);

return sout;
} // XXX_test

/*
// /usr/include/x86_64-linux-gnu/bits/poll.h
#if defined __USE_XOPEN || defined __USE_XOPEN2K8
// These values are defined in XPG4.2.  
# define POLLRDNORM 0x040       // Normal data may be read.  
# define POLLRDBAND 0x080       // Priority data may be read.  
# define POLLWRNORM 0x100       // Writing now will not block.  
# define POLLWRBAND 0x200       // Priority data may be written.  
#endif
#ifdef __USE_GNU
// These are extensions for Linux.  
# define POLLMSG    0x400
# define POLLREMOVE 0x1000
# define POLLRDHUP  0x2000
#endif

*/
StrTy EventStr(const int e) const
{
Ss ss;
if (e&POLLIN) { ss<<"POLLIN"<<POLLIN<<" "; } 
if (e&POLLPRI) { ss<<"POLLPRI"<<POLLPRI<<" "; } 
if (e&POLLOUT) { ss<<"POLLOUT"<<POLLOUT<<" "; } 
if (e&POLLERR) { ss<<"POLLERR"<<POLLERR<<" "; } 
if (e&POLLHUP) { ss<<"POLLHUP"<<POLLHUP<<" "; } 
if (e&POLLNVAL) { ss<<"POLLNVAL"<<POLLNVAL<<" "; } 

#if defined __USE_XOPEN || defined __USE_XOPEN2K8
if (e&POLLRDNORM) { ss<<"POLLRDNORM"<<POLLRDNORM<<" "; } 
if (e&POLLRDBAND) { ss<<"POLLRDBAND"<<POLLRDBAND<<" "; } 
if (e&POLLWRNORM) { ss<<"POLLWRNORM"<<POLLWRNORM<<" "; } 
if (e&POLLWRBAND) { ss<<"POLLWRBAND"<<POLLWRBAND<<" "; } 

#endif

#ifdef __USE_GNU
if (e&POLLRDHUP) { ss<<"POLLRDHUP"<<POLLRDHUP<<" "; } 
if (e&POLLREMOVE) { ss<<"POLLREMOVE"<<POLLREMOVE<<" "; } 
if (e&POLLMSG) { ss<<"POLLMSG"<<POLLMSG<<" "; } 
#endif


return ss.str();
} // EventStr

IdxTy AddListen(const int s ) { 
//MM_ERR(MMPR4(__FUNCTION__,s,m_n,m_size))
if (m_n>=m_size) return BAD;
m_polls[m_n].fd=s;
m_polls[m_n].events=~0;
m_polls[m_n].revents=0;
++m_n;
return  0; 
}  // AddListen 
IdxTy AddInput(const int s ) { 
//MM_ERR(MMPR4(__FUNCTION__,s,m_n,m_size))
if (m_n>=m_size) return BAD;
m_polls[m_n].fd=s;
m_polls[m_n].events=~0;
m_polls[m_n].revents=0;
++m_n;
return  0; 
}  // AddInput
IdxTy AddOutput(const int s ) { 
//MM_ERR(MMPR4(__FUNCTION__,s,m_n,m_size))
if (m_n>=m_size) return BAD;
m_polls[m_n].fd=s;
m_polls[m_n].events=~0;
m_polls[m_n].revents=0;
++m_n;
return  0; 
}  // AddOutput



template <class Tv > void NonZeds(Tv & v, const IdxTy n) 
{IdxTy i=0;
if (n>m_n) { MM_ERR(" danger will robinson "<<MMPR2(n,m_n)); } 
IdxTy nleft=n; while (nleft) { if (m_polls[i].revents!=0){if (false) { MM_ERR(MMPR(i))}  --nleft;  v.push_back(i); }   ++i; } 
} // non_zeds

void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
//const Line & l=r[i];
//const IdxTy len=l.size();


}  // i 

} // Init 
void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
BaseParams kvp(sin);
} // Init 

void Init()
{
m_n=0;
m_size=20;
m_polls= new PollTy[m_size];
} // Init



// MEMBERS
PollTy * m_polls;
IdxTy m_n,m_size;


}; // mjm_pollfds

//////////////////////////////////////////////

template <class Tr>
class mjm_pollfds_map : public std::map<typename Tr::StrTy, mjm_pollfds< Tr > >  
{
 typedef mjm_pollfds_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_pollfds< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_pollfds_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_pollfds_map




////////////////////////////////////////////
#ifdef  TEST_MJM_POLLFDS
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_pollfds <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;

#define CI(n) atoi(cip.wif(n).c_str()) 

void about()
{
Ss ss;
ss<<" MJM_POLLFDS "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
typedef mjm_ragged_table Ragged;

#define CIP(n) atoi(cip.wif(n).c_str())
#define CFP(n) atof(cip.wif(n).c_str())

int main(int argc,char **args)
{
about();
typedef mjm_pollfds<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="loadragged") {
 	const IdxTy start=atoi(cip.wif(2).c_str()); 
	const IdxTy first=atoi(cip.wif(3).c_str()); 
	const IdxTy flags=atoi(cip.wif(4).c_str()); 
Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="test") {StrTy xxx=x.xxx_test(cip.p1,CIP(2)); MM_ERR(MMPR(xxx))  }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_POLLFDS_H__ 
