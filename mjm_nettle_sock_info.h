#ifndef MJM_NETTLE_SOCK_INFO_H__
#define MJM_NETTLE_SOCK_INFO_H__

#include "mjm_globals.h"
#include "mjm_thread_util.h"

//#include "mjm_block_matrix.h"
#include "mjm_instruments.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_worm_blob.h"
#include "mjm_collections.h"
//#include "mjm_tokenized_collections.h"
#include "mjm_canned_methods.h"

#include "mjm_pawnoff.h"
#include "mjm_strings.h"
#include "mjm_string_kvp.h"
#include "mjm_generic_iterators.h"

#include "mjm_ya_buffer.h"
#include "mjm_nettle_creds.h"


#include <map> 
#include <vector> 
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <fstream>
#include <signal.h>
#include <stdlib.h>
#include <stdint.h>


/*
<one line to give the program's name and a brief idea of what it does.>


Conceived and written by Mike Marchywka from 2025 to present.
See dates in individual code pieces as they were 
generated from my wizards. 
Copyright (C) <year> <name of author>


This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
@software{,
  author = {Michael J Marchywka},
  city = {Talking Rock GA 30175 USA},
  title = {},
abstract={},
institution={},
license={Knowledge sir should be free to all },
publisher={Mike Marchywka},
email={marchywka@hotmail.com},
authorid={orcid.org/0000-0001-9237-455X},
  filename={mjm_nettle_sock_info.h},
  url = {},
  version = {0.0.0},
  date-started={2025-04-06},
}
*/

// Sun 06 Apr 2025 02:23:40 PM EDT
// generated by /home/documents/cpp/scripts/cpputil -classhdr mjm_nettle_sock_info   
// QUICKCOMPILE  g++  -MMD -MF mjm_nettle_sock_info.deps  -Wall -Wno-misleading-indentation  -std=gnu++11 -DTEST_MJM_NETTLE_SOCK_INFO -I. -I../../mjm/hlib -I../../mjm/num  -gdwarf-3 -O0  -x c++ mjm_nettle_sock_info.h  -o mjm_nettle_sock_info.out -lpthread -lreadline

mjm_global_credits::credit __credit__mjm_nettle_sock_info("mjm_nettle_sock_info" , "  ");

template <class Tr>
class mjm_nettle_sock_info 
{
 typedef mjm_nettle_sock_info Myt;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;

// TYPEDEF 
enum { BAD=~0};
//typedef mjm_canned_methods Canned;
typedef mjm_ragged_table Ragged;
typedef Ragged::Line Line;
typedef std::map<StrTy, Ragged> RaggedMap;
typedef std::vector<StrTy> Words;
typedef mjm_string_base_params<Tr> BaseParams;
typedef mjm_ya_buffer<Tr> Que;
typedef mjm_nettle_creds<Tr>  Creds;
static int serial() { static int i=0; i=i+1; return i; } 
// API

public:
mjm_nettle_sock_info():m_serial(serial()) {Init(); }
mjm_nettle_sock_info(const StrTy & sin,const IdxTy flags): m_serial(serial())  {Init(sin,flags); }
mjm_nettle_sock_info(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ): m_serial(serial())  {Init(r,start,first,flags);}
Myt & operator=(const Myt& that) { return Assign(that); } 
int sock_session() const { return m_serial; } 
int sock() const { return m_sock;}
int sock(const int s) { m_sock=s; return m_sock;}
int mate() const { return m_mate;}
int mate(const int s) { m_mate=s; return m_mate;}
bool doa() const { return m_doa;}
void set_doa() { m_doa=true; } 
//char * would_block() const { return m_would_block;}
//IdxTy block_sz() const { return m_block_sz; }
//void clear_block() { delete [] m_would_block; m_would_block=0; m_block_sz=0; } 
//void blocked(char * p, const IdxTy sz)
//{ delete [] m_would_block; m_would_block=new char[sz]; m_block_sz=sz; 
//memcpy(m_would_block,p,sz); }  
enum SOCK_TY { NONE,LISTEN, IN, OUT };
SOCK_TY type() const { return m_type; }
SOCK_TY type(const SOCK_TY t) { m_type=t;  return m_type; }
void listening(const int s) { m_type=LISTEN; m_sock=s; }
void input(const int s) { m_type=IN; m_sock=s; }
void output(const int s) { m_type=OUT; m_sock=s; }
bool listen() const { return m_type==LISTEN; } 
bool in() const { return m_type==IN; } 
bool out() const { return m_type==OUT; } 
bool encoded() const { if (in()) return enc_in&1; return enc_out&1; } 
void load(const StrTy & sin,const IdxTy flags) {Init(sin,flags); }
void load(const Ragged & r,const IdxTy start, const IdxTy first,const IdxTy flags ) {Init(r,start,first,flags);}
void save(const StrTy & fn,const StrTy &s) {Save(fn,s); }

StrTy xxx_test(const StrTy & sin, const IdxTy flags) 
{ return XXX_test(sin,flags); } 
//~mjm_nettle_sock_info() {delete [] m_would_block;}
~mjm_nettle_sock_info() {}
StrTy dump(const IdxTy flags=0) const  { return Dump(flags); }
private:
int myatoi(const StrTy & s )const   { return mjm_canned_methods::myatoi(s.c_str()); }
int myatoi(const char * c) const  { return mjm_canned_methods::myatoi(c); }
static bool Bit(const IdxTy f, const IdxTy b) { return  ((f>>b)&1)!=0; }
// should loop over map now 
static void Set(IdxTy& f, const IdxTy b,const bool x) //const  
    { if (x) f|=(1<<b); else f&=((~1)<<b); }
StrTy Dump(const IdxTy flags=0) const  {Ss ss;
ss<<MMPR4(sock(),m_type,listen(),in())<<MMPR(out());
ss<<MMPR4( ip_in, ip_out, port_in, port_out);
ss<<MMPR3( enc_in,enc_out,m_que.dump());
//ss<<MMPR2( enc_in,enc_out);
  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


void Save(const StrTy & fn,const StrTy &s) {
// std::ofstream ofs(fn);

 } // Save
StrTy XXX_test(const StrTy & sin, const IdxTy flags) 
{
StrTy sout="";
MM_ERR(MMPR3(sin,flags,sout))
BaseParams kvp(sin);

return sout;
} // XXX_test

void Init(const Ragged & r, const IdxTy start=0, const IdxTy first=0, const IdxTy flags=0  )
{
Init();
const IdxTy sz=r.size();
for(IdxTy i=start; i<sz; ++i)
{
//const Line & l=r[i];
//const IdxTy len=l.size();


}  // i 

} // Init 
void Init(const StrTy  & sin,const IdxTy flags =0  )
{
Init();
BaseParams kvp(sin);
} // Init 

void Init()
{
m_sock=BAD;
m_mate=BAD;
//m_parent=BAD;
m_type=NONE;
m_creds=0;
enc_in=1;
enc_out=1;
port_in=0;
port_out=0;
m_que.size(1<<20);
//m_would_block=0; //m_block_sz=0;
m_doa=false;
} // Init
Myt & Assign(const Myt& that) { 
m_sock =that.m_sock;
m_mate =that.m_mate;
m_type =that.m_type;
m_doa =that.m_doa;
ip_in =that.ip_in;
ip_out =that.ip_out;
port_in=that.port_in;
 port_out =that.port_out;
m_creds =that.m_creds;
enc_in =that.enc_in;
enc_out =that.enc_out;
m_que =that.m_que;
 m_meth =that.m_meth;
m_ctx =that.m_ctx ; 
 m_ssl =that.m_ssl;
return *this; }  // Assign 

public: 

// MEMBERS
const int m_serial;
int m_sock,m_mate;
//int m_parent;
IdxTy m_type;
//char * m_would_block; IdxTy m_block_sz;
bool m_doa;
// pipe 
StrTy ip_in, ip_out;
IdxTy port_in, port_out;
Creds * m_creds;
IdxTy enc_in,enc_out;
//IdxTy enc;

//int m_sock;
//IdxTy m_count,m_iter;
//char * m_buf;
//IdxTy m_sz;
//Creds m_creds;
Que  m_que;
//OsTy * m_pos;
const SSL_METHOD *  m_meth;
    SSL_CTX *m_ctx ; //  SSL_CTX_new(method);
SSL*  m_ssl;


}; // mjm_nettle_sock_info

//////////////////////////////////////////////

template <class Tr>
class mjm_nettle_sock_info_map : public std::map<typename Tr::StrTy, mjm_nettle_sock_info< Tr > >  
{
 typedef mjm_nettle_sock_info_map Myt;
typedef typename std::map<typename Tr::StrTy, mjm_nettle_sock_info< Tr> >   Super;
 typedef typename Tr::IdxTy IdxTy;
 typedef typename Tr::D D;
 typedef typename Tr::StrTy StrTy;
 typedef typename Tr::Ss Ss;
 typedef typename Tr::IsTy IsTy;
 typedef typename Tr::OsTy OsTy;
 typedef typename Tr::Ofs Ofs;
//typedef typename Tr::FlagTy; 
// typedef typename Tr::MyBlock  MyBlock;
public:
mjm_nettle_sock_info_map() {}
StrTy dump(const IdxTy flags=0) { return Dump(flags); }
private:
bool Bit(const IdxTy f, const IdxTy b) const  { return  ((f>>b)&1)!=0; }
// should loop over map now 
//StrTy Dump(const IdxTy flags=0) {Ss ss;  return ss.str(); }
typedef typename mjm_thread_util<Tr>::mutex_vector MutexVector;

enum { MAP_MU=0 , MU_SZ};
mutable MutexVector m_mutex_vector;
void EnterSerial(const IdxTy i)const  {  m_mutex_vector.enter_serial(i ); }
void ExitSerial(const IdxTy i)const  {  m_mutex_vector.exit_serial(i ); }
//m_mutex_vector = MutexVector(MU_SZ);


//StrTy dump(const IdxTy flags=0) { return Dump(flags); }

private:

void Init()
{


}

StrTy Dump(const IdxTy flags=0)
{
Ss ss;
MM_LOOP(ii,(*this))
{
ss<<(*ii).first<<CRLF;
ss<<(*ii).second.dump()<<CRLF;


}
return ss.str();
// return Dump(flags); 

}




private:

}; // mjm_nettle_sock_info_map




////////////////////////////////////////////
#ifdef  TEST_MJM_NETTLE_SOCK_INFO
class Tr {
public:
// typedef mjm_string_picker Myt;
 typedef unsigned int IdxTy;
 typedef double  D;
 typedef std::string StrTy;
 typedef std::stringstream Ss;
 typedef std::istream  IsTy;
 typedef std::ostream  OsTy;
 typedef std::ofstream  Ofs;
// typedef typename Tr::MyBlock  MyBlock;
}; // 


#include "mjm_instruments.h"
#include "mjm_cli_ui.h"
typedef Tr::StrTy StrTy;
typedef Tr::IdxTy IdxTy;

template <class Tt> class tester_ {
typedef tester_<Tt> Myt;
typedef mjm_cli_ui<Myt> Cli;
//typedef tester Myt;
//typedef mjm_cli_ui<Myt> Cli;
typedef std::map<StrTy, StrTy> LocalVar;

typedef CommandInterpretterParam Cip ;
typedef void (Myt:: * CmdFunc)(Cip &, LocalVar &  ) ;
typedef std::map<StrTy, CmdFunc> CmdMap;
typedef std::vector<StrTy> Choices;
//typedef void (Myt:: * CompleteFunc) ( Cli::list_type & choices,  const char * cmd, const char * frag);
typedef void (Myt:: * CompleteFunc) ( Choices & choices,  const char * cmd, const char * frag);
typedef std::map<StrTy, CompleteFunc> CompMap;

public:
 //void cli_cmd( Cli::list_type & choices,  const char * frag)
 void cli_cmd( Choices & choices,  const char * frag)
{
const IdxTy nfrag=strlen(frag);
MM_LOOP(ii,m_cmd_map)
{
const StrTy & v=(*ii).first;
if (strncmp(v.c_str(),frag,nfrag)==0)  choices.push_back(v);
}
}

 //void cli_param( Cli::list_type & choices,  const char * _cmd, const char * frag)
 void cli_param( Choices & choices,  const char * _cmd, const char * frag)
{
MM_ERR("cli_param"<<MMPR2(_cmd,frag))
//const StrTy cmd=CliTy::word(StrTy(_cmd),0);
//auto ii=m_comp_map.find(cmd);
//if ( ii!=m_comp_map.end()) ((this)->*(*ii).second)(choices,cmd.c_str(),frag);
}

CmdMap m_cmd_map;


 }; // tester_
typedef tester_< mjm_nettle_sock_info <Tr>  > tester;

typedef mjm_cli_ui<tester> Cli;


typedef Tr::Ss Ss;

#define CI(n) atoi(cip.wif(n).c_str()) 

void about()
{
Ss ss;
ss<<" MJM_NETTLE_SOCK_INFO "<<__DATE__<<" "<<__TIME__<<CRLF;
MM_MSG(ss.str())

}
typedef mjm_ragged_table Ragged;

#define CIP(n) atoi(cip.wif(n).c_str())
#define CFP(n) atof(cip.wif(n).c_str())

int main(int argc,char **args)
{
about();
typedef mjm_nettle_sock_info<Tr>  Myt;
//Myt x(argc,args);
Myt x;

//if (!x.done()) x.command_mode();
Cli cli;
tester tester;
CommandInterpretter li(&std::cin);
li.push(args,argc);
cli.set_target(tester);
cli.set_command_handler(&tester::cli_cmd);
cli.set_param_handler(&tester::cli_param);
cli.activate();
li.set_split(1,' ');
while (li.nextok())
{
const IdxTy sz=li.size();
if (sz<1) continue;
const StrTy cmd=li.word(0);
if (cmd=="") continue;
if (cmd=="about"){ about();  continue; } 
CommandInterpretterParam  cip(li);

if (cmd=="loadragged") {
 	const IdxTy start=atoi(cip.wif(2).c_str()); 
	const IdxTy first=atoi(cip.wif(3).c_str()); 
	const IdxTy flags=atoi(cip.wif(4).c_str()); 
Ragged r; r.load(cip.p1); x.load(r,start,first,flags); }
if (cmd=="load") {x.load(cip.p1,atoi(cip.p2.c_str())); }
if (cmd=="save") {x.save(cip.p1,cip.p2); }
if (cmd=="test") {StrTy xxx=x.xxx_test(cip.p1,CIP(2)); MM_ERR(MMPR(xxx))  }
if (cmd=="quit") break;
// NB this does not work in gneral when errors are disabled
//if (cmd=="dump") { MM_ERR(x.dump()) }
if (cmd=="dump") { auto wtf=x.dump();  MM_ERR(wtf) }
//else if (cmd=="load") { x.load(li.words(),1); }
//else if (cmd=="clear") { x.clear(); }

} // nextok

//if (!x.done()) x.command_mode();
return 0;
}

#endif // main

#endif // MJM_NETTLE_SOCK_INFO_H__ 
